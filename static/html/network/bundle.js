!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=22)}({20:function(t){t.exports=JSON.parse('[{"id":"source_0","date":"Manu","user":"","description":"Received from Phong Tran (AP240)","strains_out":["SP1"],"strains_in":[]},{"id":"source_1","date":"Manu","user":"","description":"Received from Phong Tran (AP241)","strains_out":["SP2"],"strains_in":[]},{"id":"source_2","date":"Manu","user":"","description":"SP2 transformed","strains_out":["SP3"],"strains_in":["SP2"]},{"id":"source_3","date":"Manu","user":"","description":"SP1xSP3","strains_out":["SP4"],"strains_in":["SP1","SP3"]},{"id":"source_4","date":"Manu","user":"","description":"SP2 transformed","strains_out":["SP5"],"strains_in":["SP2"]},{"id":"source_5","date":"Manu","user":"","description":"SP5xSP4","strains_out":["SP6","SP7","SP8"],"strains_in":["SP5","SP4"]},{"id":"source_6","date":"Manu","user":"","description":"SP1 transformed","strains_out":["SP9"],"strains_in":["SP1"]},{"id":"source_7","date":"Manu","user":"","description":"SP3xSP9","strains_out":["SP10","SP11","SP12"],"strains_in":["SP3","SP9"]},{"id":"source_8","date":"Manu","user":"","description":"SP12xSP7","strains_out":["SP13","SP14"],"strains_in":["SP12","SP7"]},{"id":"source_9","date":"Manu","user":"","description":"SP9xSP6","strains_out":["SP15","SP16"],"strains_in":["SP9","SP6"]},{"id":"source_10","date":"Manu","user":"","description":"SP1 transformed","strains_out":["SP17"],"strains_in":["SP1"]},{"id":"source_11","date":"Manu","user":"","description":"SP2xSP17","strains_out":["SP18"],"strains_in":["SP2","SP17"]},{"id":"source_12","date":"Manu","user":"","description":"SP1 transformed","strains_out":["SP19"],"strains_in":["SP1"]},{"id":"source_13","date":"Manu","user":"","description":"SP19xSP18","strains_out":["SP20","SP21","SP22"],"strains_in":["SP19","SP18"]},{"id":"source_14","date":"Manu","user":"","description":"SP20xSP6","strains_out":["SP23","SP24"],"strains_in":["SP20","SP6"]},{"id":"source_15","date":"Manu","user":"","description":"SP2 transformed","strains_out":["SP25"],"strains_in":["SP2"]},{"id":"source_16","date":"Manu","user":"","description":"SP25xSP21","strains_out":["SP26","SP27","SP28"],"strains_in":["SP25","SP21"]}]')},21:function(t){t.exports=JSON.parse('[{"collection":"SP","number":"1","genotype":"h- ade6-M210  ura4-D18  leu1-32","id":"SP1"},{"collection":"SP","number":"2","genotype":"h+ ade6-M216  ura4-D18  leu1-32","id":"SP2"},{"collection":"SP","number":"3","genotype":"h+ mCherry-atb2::hph ade6-M216  ura4-D18  leu1-32","id":"SP3"},{"collection":"SP","number":"4","genotype":"h- mCherry-atb2::hph ade6-M216  ura4-D18  leu1-32","id":"SP4"},{"collection":"SP","number":"5","genotype":"h+ ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP5"},{"collection":"SP","number":"6","genotype":"h- ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP6"},{"collection":"SP","number":"7","genotype":"h+ mCherry-atb2::hph ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP7"},{"collection":"SP","number":"8","genotype":"h- mCherry-atb2::hph ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP8"},{"collection":"SP","number":"9","genotype":"h- cut11-GFP::Kan ade6-M216  ura4-D18  leu1-32","id":"SP9"},{"collection":"SP","number":"10","genotype":"h+ cut11-GFP::Kan ade6-M216  ura4-D18  leu1-32","id":"SP10"},{"collection":"SP","number":"11","genotype":"h- cut11-GFP::Kan mCherry-atb2::hph ade6-M216  ura4-D18  leu1-32","id":"SP11"},{"collection":"SP","number":"12","genotype":"h- cut11-GFP::Kan mCherry-atb2::hph ade6-M216  ura4-D18  leu1-32","id":"SP12"},{"collection":"SP","number":"13","genotype":"h- cut11-GFP::Kan mCherry-atb2::hph ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP13"},{"collection":"SP","number":"14","genotype":"h+ cut11-GFP::Kan mCherry-atb2::hph ase1D::Nat ade6-M216  ura4-D18  leu1-32","id":"SP14"},{"collection":"SP","number":"15","genotype":"h- cut11-GFP::Kan ade6-M216  ura4-D18  leu1-32","id":"SP15"},{"collection":"SP","number":"16","genotype":"h- cut11-GFP::Kan ade6-M216  ura4-D18  leu1-32","id":"SP16"},{"collection":"SP","number":"17","genotype":"h- leu1:sid4-mCherry ade6-M210  ura4-D18  leu1-32","id":"SP17"},{"collection":"SP","number":"18","genotype":"h+ leu1:sid4-mCherry ade6-M210  ura4-D18  leu1-32","id":"SP18"},{"collection":"SP","number":"19","genotype":"h- klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP19"},{"collection":"SP","number":"20","genotype":"h+ leu1:sid4-mCherry klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP20"},{"collection":"SP","number":"21","genotype":"h- leu1:sid4-mCherry klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP21"},{"collection":"SP","number":"22","genotype":"h- klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP22"},{"collection":"SP","number":"23","genotype":"h+ leu1:sid4-mCherry klp9-GFP:kan ase1D::Nat ade6-M210  ura4-D18  leu1-32","id":"SP23"},{"collection":"SP","number":"24","genotype":"h+ leu1:sid4-mCherry klp9-GFP:kan ase1D::Nat ade6-M210  ura4-D18  leu1-32","id":"SP24"},{"collection":"SP","number":"25","genotype":"h+ Nat::P1nmt1-ase1 ade6-M216  ura4-D18  leu1-32","id":"SP25"},{"collection":"SP","number":"26","genotype":"h- Nat::P1nmt1-ase1 ade6-M216  ura4-D18  leu1-32","id":"SP26"},{"collection":"SP","number":"27","genotype":"h- leu1:sid4-mCherry klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP27"},{"collection":"SP","number":"28","genotype":"h- leu1:sid4-mCherry klp9-GFP:kan ade6-M210  ura4-D18  leu1-32","id":"SP28"}]')},22:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}};var u=i(r);u.right,u.left;var o=Array.prototype;o.slice,o.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);Array.prototype.slice;var a={value:function(){}};function s(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new c(r)}function c(t){this._=t}function l(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function h(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=a,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}c.prototype=s.prototype={constructor:c,on:function(t,n){var e,r=this._,i=l(t+"",r),u=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<o;)if(e=(t=i[u]).type)r[e]=h(r[e],t.name,n);else if(null==n)for(e in r)r[e]=h(r[e],t.name,null);return this}for(;++u<o;)if((e=(t=i[u]).type)&&(e=f(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new c(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),u=0;u<e;++u)i[u]=arguments[u+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(u=0,e=(r=this._[t]).length;u<e;++u)r[u].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,u=r.length;i<u;++i)r[i].value.apply(n,e)}};var d=s;function p(){}var g=function(t){return null==t?p:function(){return this.querySelector(t)}};function v(){return[]}var y=function(t){return null==t?v:function(){return this.querySelectorAll(t)}},m=function(t){return function(){return this.matches(t)}},_=function(t){return new Array(t.length)};function w(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}w.prototype={constructor:w,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function x(t,n,e,r,i,u){for(var o,a=0,s=n.length,c=u.length;a<c;++a)(o=n[a])?(o.__data__=u[a],r[a]=o):e[a]=new w(t,u[a]);for(;a<s;++a)(o=n[a])&&(i[a]=o)}function M(t,n,e,r,i,u,o){var a,s,c,l={},f=n.length,h=u.length,d=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(d[a]=c="$"+o.call(s,s.__data__,a,n),c in l?i[a]=s:l[c]=s);for(a=0;a<h;++a)(s=l[c="$"+o.call(t,u[a],a,u)])?(r[a]=s,s.__data__=u[a],l[c]=null):e[a]=new w(t,u[a]);for(a=0;a<f;++a)(s=n[a])&&l[d[a]]===s&&(i[a]=s)}function b(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var P="http://www.w3.org/1999/xhtml",S={svg:"http://www.w3.org/2000/svg",xhtml:P,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},C=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),S.hasOwnProperty(n)?{space:S[n],local:t}:t};function T(t){return function(){this.removeAttribute(t)}}function N(t){return function(){this.removeAttributeNS(t.space,t.local)}}function k(t,n){return function(){this.setAttribute(t,n)}}function A(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function D(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function U(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var L=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t){return function(){this.style.removeProperty(t)}}function F(t,n,e){return function(){this.style.setProperty(t,n,e)}}function R(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Y(t,n){return t.style.getPropertyValue(n)||L(t).getComputedStyle(t,null).getPropertyValue(n)}function q(t){return function(){delete this[t]}}function H(t,n){return function(){this[t]=n}}function j(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function z(t){return t.trim().split(/^|\s+/)}function O(t){return t.classList||new X(t)}function X(t){this._node=t,this._names=z(t.getAttribute("class")||"")}function $(t,n){for(var e=O(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function I(t,n){for(var e=O(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function G(t){return function(){$(this,t)}}function V(t){return function(){I(this,t)}}function B(t,n){return function(){(n.apply(this,arguments)?$:I)(this,t)}}X.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Z(){this.textContent=""}function W(t){return function(){this.textContent=t}}function K(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function J(){this.innerHTML=""}function Q(t){return function(){this.innerHTML=t}}function tt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function nt(){this.nextSibling&&this.parentNode.appendChild(this)}function et(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function rt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===P&&n.documentElement.namespaceURI===P?n.createElement(t):n.createElementNS(e,t)}}function it(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ut=function(t){var n=C(t);return(n.local?it:rt)(n)};function ot(){return null}function at(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ct(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var lt={},ft=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(lt={mouseenter:"mouseover",mouseleave:"mouseout"}));function ht(t,n,e){return t=dt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function dt(t,n,e){return function(r){var i=ft;ft=r;try{t.call(this,this.__data__,n,e)}finally{ft=i}}}function pt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function gt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,u=n.length;r<u;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function vt(t,n,e){var r=lt.hasOwnProperty(t.type)?ht:dt;return function(i,u,o){var a,s=this.__on,c=r(n,u,o);if(s)for(var l=0,f=s.length;l<f;++l)if((a=s[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(a):this.__on=[a]}}function yt(t,n,e,r){var i=ft;t.sourceEvent=ft,ft=t;try{return n.apply(e,r)}finally{ft=i}}function mt(t,n,e){var r=L(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function _t(t,n){return function(){return mt(this,t,n)}}function wt(t,n){return function(){return mt(this,t,n.apply(this,arguments))}}var xt=[null];function Mt(t,n){this._groups=t,this._parents=n}function bt(){return new Mt([[document.documentElement]],xt)}Mt.prototype=bt.prototype={constructor:Mt,select:function(t){"function"!=typeof t&&(t=g(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o,a=n[i],s=a.length,c=r[i]=new Array(s),l=0;l<s;++l)(u=a[l])&&(o=t.call(u,u.__data__,l,a))&&("__data__"in u&&(o.__data__=u.__data__),c[l]=o);return new Mt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=y(t));for(var n=this._groups,e=n.length,r=[],i=[],u=0;u<e;++u)for(var o,a=n[u],s=a.length,c=0;c<s;++c)(o=a[c])&&(r.push(t.call(o,o.__data__,c,a)),i.push(o));return new Mt(r,i)},filter:function(t){"function"!=typeof t&&(t=m(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],c=0;c<a;++c)(u=o[c])&&t.call(u,u.__data__,c,o)&&s.push(u);return new Mt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var e,r=n?M:x,i=this._parents,u=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=u.length,a=new Array(o),s=new Array(o),c=new Array(o),l=0;l<o;++l){var f=i[l],h=u[l],d=h.length,p=t.call(f,f&&f.__data__,l,i),g=p.length,v=s[l]=new Array(g),y=a[l]=new Array(g);r(f,h,v,y,c[l]=new Array(d),p,n);for(var m,_,w=0,b=0;w<g;++w)if(m=v[w]){for(w>=b&&(b=w+1);!(_=y[b])&&++b<g;);m._next=_||null}}return(a=new Mt(a,i))._enter=s,a._exit=c,a},enter:function(){return new Mt(this._enter||this._groups.map(_),this._parents)},exit:function(){return new Mt(this._exit||this._groups.map(_),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,u=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?u.remove():e(u),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,c=n[a],l=e[a],f=c.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;a<r;++a)o[a]=n[a];return new Mt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],u=i.length-1,o=i[u];--u>=0;)(r=i[u])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=b);for(var e=this._groups,r=e.length,i=new Array(r),u=0;u<r;++u){for(var o,a=e[u],s=a.length,c=i[u]=new Array(s),l=0;l<s;++l)(o=a[l])&&(c[l]=o);c.sort(n)}return new Mt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,u=r.length;i<u;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,u=n[e],o=0,a=u.length;o<a;++o)(i=u[o])&&t.call(i,i.__data__,o,u);return this},attr:function(t,n){var e=C(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?N:T:"function"==typeof n?e.local?U:D:e.local?A:k)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?E:"function"==typeof n?R:F)(t,n,null==e?"":e)):Y(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?q:"function"==typeof n?j:H)(t,n)):this.node()[t]},classed:function(t,n){var e=z(t+"");if(arguments.length<2){for(var r=O(this.node()),i=-1,u=e.length;++i<u;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?B:n?G:V)(e,n))},text:function(t){return arguments.length?this.each(null==t?Z:("function"==typeof t?K:W)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?J:("function"==typeof t?tt:Q)(t)):this.node().innerHTML},raise:function(){return this.each(nt)},lower:function(){return this.each(et)},append:function(t){var n="function"==typeof t?t:ut(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:ut(t),r=null==n?ot:"function"==typeof n?n:g(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(at)},clone:function(t){return this.select(t?ct:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,u=pt(t+""),o=u.length;if(!(arguments.length<2)){for(a=n?vt:gt,null==e&&(e=!1),r=0;r<o;++r)this.each(a(u[r],n,e));return this}var a=this.node().__on;if(a)for(var s,c=0,l=a.length;c<l;++c)for(r=0,s=a[c];r<o;++r)if((i=u[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?wt:_t)(t,n))}};var Pt=bt,St=function(t){return"string"==typeof t?new Mt([[document.querySelector(t)]],[document.documentElement]):new Mt([[t]],xt)};function Ct(){ft.stopImmediatePropagation()}var Tt=function(){ft.preventDefault(),ft.stopImmediatePropagation()},Nt=function(t){var n=t.document.documentElement,e=St(t).on("dragstart.drag",Tt,!0);"onselectstart"in n?e.on("selectstart.drag",Tt,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function kt(t,n){var e=t.document.documentElement,r=St(t).on("dragstart.drag",null);n&&(r.on("click.drag",Tt,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var At=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Dt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Ut(){}var Lt="\\s*([+-]?\\d+)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ft="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rt=/^#([0-9a-f]{3,8})$/,Yt=new RegExp("^rgb\\("+[Lt,Lt,Lt]+"\\)$"),qt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),Ht=new RegExp("^rgba\\("+[Lt,Lt,Lt,Et]+"\\)$"),jt=new RegExp("^rgba\\("+[Ft,Ft,Ft,Et]+"\\)$"),zt=new RegExp("^hsl\\("+[Et,Ft,Ft]+"\\)$"),Ot=new RegExp("^hsla\\("+[Et,Ft,Ft,Et]+"\\)$"),Xt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function $t(){return this.rgb().formatHex()}function It(){return this.rgb().formatRgb()}function Gt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Rt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Vt(n):3===e?new Kt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Bt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Bt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Yt.exec(t))?new Kt(n[1],n[2],n[3],1):(n=qt.exec(t))?new Kt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ht.exec(t))?Bt(n[1],n[2],n[3],n[4]):(n=jt.exec(t))?Bt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=zt.exec(t))?nn(n[1],n[2]/100,n[3]/100,1):(n=Ot.exec(t))?nn(n[1],n[2]/100,n[3]/100,n[4]):Xt.hasOwnProperty(t)?Vt(Xt[t]):"transparent"===t?new Kt(NaN,NaN,NaN,0):null}function Vt(t){return new Kt(t>>16&255,t>>8&255,255&t,1)}function Bt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Kt(t,n,e,r)}function Zt(t){return t instanceof Ut||(t=Gt(t)),t?new Kt((t=t.rgb()).r,t.g,t.b,t.opacity):new Kt}function Wt(t,n,e,r){return 1===arguments.length?Zt(t):new Kt(t,n,e,null==r?1:r)}function Kt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Jt(){return"#"+tn(this.r)+tn(this.g)+tn(this.b)}function Qt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function tn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function nn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,r)}function en(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=Gt(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),u=Math.max(n,e,r),o=NaN,a=u-i,s=(u+i)/2;return a?(o=n===u?(e-r)/a+6*(e<r):e===u?(r-n)/a+2:(n-e)/a+4,a/=s<.5?u+i:2-u-i,o*=60):a=s>0&&s<1?0:o,new rn(o,a,s,t.opacity)}function rn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function un(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function on(t,n,e,r,i){var u=t*t,o=u*t;return((1-3*t+3*u-o)*n+(4-6*u+3*o)*e+(1+3*t+3*u-3*o)*r+o*i)/6}At(Ut,Gt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:$t,formatHex:$t,formatHsl:function(){return en(this).formatHsl()},formatRgb:It,toString:It}),At(Kt,Wt,Dt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jt,formatHex:Jt,formatRgb:Qt,toString:Qt})),At(rn,(function(t,n,e,r){return 1===arguments.length?en(t):new rn(t,n,e,null==r?1:r)}),Dt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Kt(un(t>=240?t-240:t+120,i,r),un(t,i,r),un(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var an=function(t){return function(){return t}};function sn(t,n){return function(e){return t+e*n}}function cn(t){return 1==(t=+t)?ln:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):an(isNaN(n)?e:n)}}function ln(t,n){var e=n-t;return e?sn(t,e):an(isNaN(t)?n:t)}var fn=function t(n){var e=cn(n);function r(t,n){var r=e((t=Wt(t)).r,(n=Wt(n)).r),i=e(t.g,n.g),u=e(t.b,n.b),o=ln(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=u(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function hn(t){return function(n){var e,r,i=n.length,u=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Wt(n[e]),u[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return u=t(u),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=u(t),r.g=o(t),r.b=a(t),r+""}}}hn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],u=t[r+1],o=r>0?t[r-1]:2*i-u,a=r<n-1?t[r+2]:2*u-i;return on((e-r/n)*n,o,i,u,a)}})),hn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],u=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return on((e-r/n)*n,i,u,o,a)}}));var dn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,gn=new RegExp(pn.source,"g");var vn,yn,mn=function(t,n){var e,r,i,u=pn.lastIndex=gn.lastIndex=0,o=-1,a=[],s=[];for(t+="",n+="";(e=pn.exec(t))&&(r=gn.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,s.push({i:o,x:dn(e,r)})),u=gn.lastIndex;return u<n.length&&(i=n.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},_n=function(){for(var t,n=ft;t=n.sourceEvent;)n=t;return n},wn=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},xn=function(t,n,e){arguments.length<3&&(e=n,n=_n().changedTouches);for(var r,i=0,u=n?n.length:0;i<u;++i)if((r=n[i]).identifier===e)return wn(t,r);return null},Mn=function(t){var n=_n();return n.changedTouches&&(n=n.changedTouches[0]),wn(t,n)},bn=0,Pn=0,Sn=0,Cn=0,Tn=0,Nn=0,kn="object"==typeof performance&&performance.now?performance:Date,An="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Dn(){return Tn||(An(Un),Tn=kn.now()+Nn)}function Un(){Tn=0}function Ln(){this._call=this._time=this._next=null}function En(t,n,e){var r=new Ln;return r.restart(t,n,e),r}function Fn(){Tn=(Cn=kn.now())+Nn,bn=Pn=0;try{!function(){Dn(),++bn;for(var t,n=vn;n;)(t=Tn-n._time)>=0&&n._call.call(null,t),n=n._next;--bn}()}finally{bn=0,function(){var t,n,e=vn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:vn=n);yn=t,Yn(r)}(),Tn=0}}function Rn(){var t=kn.now(),n=t-Cn;n>1e3&&(Nn-=n,Cn=t)}function Yn(t){bn||(Pn&&(Pn=clearTimeout(Pn)),t-Tn>24?(t<1/0&&(Pn=setTimeout(Fn,t-kn.now()-Nn)),Sn&&(Sn=clearInterval(Sn))):(Sn||(Cn=kn.now(),Sn=setInterval(Rn,1e3)),bn=1,An(Fn)))}Ln.prototype=En.prototype={constructor:Ln,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Dn():+e)+(null==n?0:+n),this._next||yn===this||(yn?yn._next=this:vn=this,yn=this),this._call=t,this._time=e,Yn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Yn())}};var qn=function(t,n,e){var r=new Ln;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Hn=d("start","end","cancel","interrupt"),jn=[],zn=function(t,n,e,r,i,u){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function u(s){var c,l,f,h;if(1!==e.state)return a();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return qn(u);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(qn((function(){3===e.state&&(e.state=4,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),u=-1,o=r.length;++u<o;)r[u].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=En((function(t){e.state=1,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Hn,tween:jn,time:u.time,delay:u.delay,duration:u.duration,ease:u.ease,timer:null,state:0})};function On(t,n){var e=$n(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Xn(t,n){var e=$n(t,n);if(e.state>3)throw new Error("too late; already running");return e}function $n(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var In,Gn,Vn,Bn,Zn=function(t,n){var e,r,i,u=t.__transition,o=!0;if(u){for(i in n=null==n?null:n+"",u)(e=u[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete u[i]):o=!1;o&&delete t.__transition}},Wn=180/Math.PI,Kn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Jn=function(t,n,e,r,i,u){var o,a,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:u,rotate:Math.atan2(n,t)*Wn,skewX:Math.atan(s)*Wn,scaleX:o,scaleY:a}};function Qn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(u,o){var a=[],s=[];return u=t(u),o=t(o),function(t,r,i,u,o,a){if(t!==i||r!==u){var s=o.push("translate(",null,n,null,e);a.push({i:s-4,x:dn(t,i)},{i:s-2,x:dn(r,u)})}else(i||u)&&o.push("translate("+i+n+u+e)}(u.translateX,u.translateY,o.translateX,o.translateY,a,s),function(t,n,e,u){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),u.push({i:e.push(i(e)+"rotate(",null,r)-2,x:dn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(u.rotate,o.rotate,a,s),function(t,n,e,u){t!==n?u.push({i:e.push(i(e)+"skewX(",null,r)-2,x:dn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(u.skewX,o.skewX,a,s),function(t,n,e,r,u,o){if(t!==e||n!==r){var a=u.push(i(u)+"scale(",null,",",null,")");o.push({i:a-4,x:dn(t,e)},{i:a-2,x:dn(n,r)})}else 1===e&&1===r||u.push(i(u)+"scale("+e+","+r+")")}(u.scaleX,u.scaleY,o.scaleX,o.scaleY,a,s),u=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var te=Qn((function(t){return"none"===t?Kn:(In||(In=document.createElement("DIV"),Gn=document.documentElement,Vn=document.defaultView),In.style.transform=t,t=Vn.getComputedStyle(Gn.appendChild(In),null).getPropertyValue("transform"),Gn.removeChild(In),t=t.slice(7,-1).split(","),Jn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ne=Qn((function(t){return null==t?Kn:(Bn||(Bn=document.createElementNS("http://www.w3.org/2000/svg","g")),Bn.setAttribute("transform",t),(t=Bn.transform.baseVal.consolidate())?(t=t.matrix,Jn(t.a,t.b,t.c,t.d,t.e,t.f)):Kn)}),", ",")",")");function ee(t,n){var e,r;return function(){var i=Xn(this,t),u=i.tween;if(u!==e)for(var o=0,a=(r=e=u).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function re(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var u=Xn(this,t),o=u.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=a;break}s===c&&i.push(a)}u.tween=i}}function ie(t,n,e){var r=t._id;return t.each((function(){var t=Xn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return $n(t,r).value[n]}}var ue=function(t,n){var e;return("number"==typeof n?dn:n instanceof Gt?fn:(e=Gt(n))?(n=e,fn):mn)(t,n)};function oe(t){return function(){this.removeAttribute(t)}}function ae(t){return function(){this.removeAttributeNS(t.space,t.local)}}function se(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttribute(t);return o===u?null:o===r?i:i=n(r=o,e)}}function ce(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===u?null:o===r?i:i=n(r=o,e)}}function le(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttribute(t)}}function fe(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function he(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function de(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function pe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&de(t,i)),e}return i._value=n,i}function ge(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&he(t,i)),e}return i._value=n,i}function ve(t,n){return function(){On(this,t).delay=+n.apply(this,arguments)}}function ye(t,n){return n=+n,function(){On(this,t).delay=n}}function me(t,n){return function(){Xn(this,t).duration=+n.apply(this,arguments)}}function _e(t,n){return n=+n,function(){Xn(this,t).duration=n}}function we(t,n){if("function"!=typeof n)throw new Error;return function(){Xn(this,t).ease=n}}function xe(t,n,e){var r,i,u=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?On:Xn;return function(){var o=u(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}var Me=Pt.prototype.constructor;function be(t){return function(){this.style.removeProperty(t)}}function Pe(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Se(t,n,e){var r,i;function u(){var u=n.apply(this,arguments);return u!==i&&(r=(i=u)&&Pe(t,u,e)),r}return u._value=n,u}function Ce(t){return function(n){this.textContent=t.call(this,n)}}function Te(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ce(r)),n}return r._value=t,r}var Ne=0;function ke(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ae(){return++Ne}var De=Pt.prototype;ke.prototype=function(t){return Pt().transition(t)}.prototype={constructor:ke,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=g(t));for(var r=this._groups,i=r.length,u=new Array(i),o=0;o<i;++o)for(var a,s,c=r[o],l=c.length,f=u[o]=new Array(l),h=0;h<l;++h)(a=c[h])&&(s=t.call(a,a.__data__,h,c))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,zn(f[h],n,e,h,f,$n(a,e)));return new ke(u,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,i=r.length,u=[],o=[],a=0;a<i;++a)for(var s,c=r[a],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,d=t.call(s,s.__data__,f,c),p=$n(s,e),g=0,v=d.length;g<v;++g)(h=d[g])&&zn(h,n,e,g,d,p);u.push(d),o.push(s)}return new ke(u,o,n,e)},filter:function(t){"function"!=typeof t&&(t=m(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],c=0;c<a;++c)(u=o[c])&&t.call(u,u.__data__,c,o)&&s.push(u);return new ke(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,c=n[a],l=e[a],f=c.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;a<r;++a)o[a]=n[a];return new ke(o,this._parents,this._name,this._id)},selection:function(){return new Me(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ae(),r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,c=0;c<s;++c)if(o=a[c]){var l=$n(o,n);zn(o,t,e,c,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new ke(r,this._parents,t,e)},call:De.call,nodes:De.nodes,node:De.node,size:De.size,empty:De.empty,each:De.each,on:function(t,n){var e=this._id;return arguments.length<2?$n(this.node(),e).on.on(t):this.each(xe(e,t,n))},attr:function(t,n){var e=C(t),r="transform"===e?ne:ue;return this.attrTween(t,"function"==typeof n?(e.local?fe:le)(e,r,ie(this,"attr."+t,n)):null==n?(e.local?ae:oe)(e):(e.local?ce:se)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=C(t);return this.tween(e,(r.local?pe:ge)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?te:ue;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var u=Y(this,t),o=(this.style.removeProperty(t),Y(this,t));return u===o?null:u===e&&o===r?i:i=n(e=u,r=o)}}(t,r)).on("end.style."+t,be(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,u;return function(){var o=Y(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=Y(this,t)),o===s?null:o===r&&s===i?u:(i=s,u=n(r=o,a))}}(t,r,ie(this,"style."+t,n))).each(function(t,n){var e,r,i,u,o="style."+n,a="end."+o;return function(){var s=Xn(this,t),c=s.on,l=null==s.value[o]?u||(u=be(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(a,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,u=e+"";return function(){var o=Y(this,t);return o===u?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Se(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ie(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Te(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=$n(this.node(),e).tween,u=0,o=i.length;u<o;++u)if((r=i[u]).name===t)return r.value;return null}return this.each((null==n?ee:re)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ve:ye)(n,t)):$n(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?me:_e)(n,t)):$n(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(we(n,t)):$n(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(u,o){var a={value:o},s={value:function(){0==--i&&u()}};e.each((function(){var e=Xn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var Ue={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Le(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Ue.time=Dn(),Ue;return e}Pt.prototype.interrupt=function(t){return this.each((function(){Zn(this,t)}))},Pt.prototype.transition=function(t){var n,e;t instanceof ke?(n=t._id,t=t._name):(n=Ae(),(e=Ue).time=Dn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,c=0;c<s;++c)(o=a[c])&&zn(o,t,n,c,a,e||Le(o,n));return new ke(r,this._parents,t,n)};function Ee(t){return[+t[0],+t[1]]}function Fe(t){return[Ee(t[0]),Ee(t[1])]}["w","e"].map(Re),["n","s"].map(Re),["n","w","e","s","nw","ne","sw","se"].map(Re);function Re(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ye=Math.PI,qe=2*Ye,He=qe-1e-6;function je(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ze(){return new je}je.prototype=ze.prototype={constructor:je,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+u)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var u=this._x1,o=this._y1,a=e-t,s=r-n,c=u-t,l=o-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*a-s*c)>1e-6&&i){var h=e-u,d=r-o,p=a*a+s*s,g=h*h+d*d,v=Math.sqrt(p),y=Math.sqrt(f),m=i*Math.tan((Ye-Math.acos((p+f-g)/(2*v*y)))/2),_=m/y,w=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*c)+","+(n+_*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*d)+","+(this._x1=t+w*a)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,u){t=+t,n=+n,u=!!u;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+o,c=n+a,l=1^u,f=u?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%qe+qe),f>He?this._+="A"+e+","+e+",0,1,"+l+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Ye)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Oe(){}function Xe(t,n){var e=new Oe;if(t instanceof Oe)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,u=t.length;if(null==n)for(;++i<u;)e.set(i,t[i]);else for(;++i<u;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}Oe.prototype=Xe.prototype={constructor:Oe,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var $e=Xe;function Ie(){}var Ge=$e.prototype;function Ve(t,n){var e=new Ie;if(t instanceof Ie)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Ie.prototype=Ve.prototype={constructor:Ie,has:Ge.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ge.remove,clear:Ge.clear,values:Ge.keys,size:Ge.size,empty:Ge.empty,each:Ge.each};Array.prototype.slice;var Be=function(t){return function(){return t}};function Ze(t,n,e,r,i,u,o,a,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=u,this.y=o,this.dx=a,this.dy=s,this._=c}function We(){return!ft.ctrlKey&&!ft.button}function Ke(){return this.parentNode}function Je(t){return null==t?{x:ft.x,y:ft.y}:t}function Qe(){return navigator.maxTouchPoints||"ontouchstart"in this}Ze.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var tr=function(t){return function(){return t}},nr=function(){return 1e-6*(Math.random()-.5)};function er(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,u,o,a,s,c,l,f,h,d=t._root,p={data:r},g=t._x0,v=t._y0,y=t._x1,m=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(u=(g+y)/2))?g=u:y=u,(l=e>=(o=(v+m)/2))?v=o:m=o,i=d,!(d=d[f=l<<1|c]))return i[f]=p,t;if(a=+t._x.call(null,d.data),s=+t._y.call(null,d.data),n===a&&e===s)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(u=(g+y)/2))?g=u:y=u,(l=e>=(o=(v+m)/2))?v=o:m=o}while((f=l<<1|c)==(h=(s>=o)<<1|a>=u));return i[h]=d,i[f]=p,t}var rr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ir(t){return t[0]}function ur(t){return t[1]}function or(t,n,e){var r=new ar(null==n?ir:n,null==e?ur:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ar(t,n,e,r,i,u){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=u,this._root=void 0}function sr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var cr=or.prototype=ar.prototype;cr.copy=function(){var t,n,e=new ar(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=sr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=sr(n));return e},cr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return er(this.cover(n,e),n,e,t)},cr.addAll=function(t){var n,e,r,i,u=t.length,o=new Array(u),a=new Array(u),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<u;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),e=0;e<u;++e)er(this,o[e],a[e],t[e]);return this},cr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,u=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,u=(r=Math.floor(n))+1;else{for(var o,a,s=i-e,c=this._root;e>t||t>=i||r>n||n>=u;)switch(a=(n<r)<<1|t<e,(o=new Array(4))[a]=c,c=o,s*=2,a){case 0:i=e+s,u=r+s;break;case 1:e=i-s,u=r+s;break;case 2:i=e+s,r=u-s;break;case 3:e=i-s,r=u-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=u,this},cr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},cr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},cr.find=function(t,n,e){var r,i,u,o,a,s,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new rr(g,l,f,h,d)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,d=n+e,e*=e);s=p.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(u=s.y0)>d||(o=s.x1)<l||(a=s.y1)<f))if(g.length){var v=(i+o)/2,y=(u+a)/2;p.push(new rr(g[3],v,y,o,a),new rr(g[2],i,y,v,a),new rr(g[1],v,u,o,y),new rr(g[0],i,u,v,y)),(c=(n>=y)<<1|t>=v)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=s)}else{var m=t-+this._x.call(null,g.data),_=n-+this._y.call(null,g.data),w=m*m+_*_;if(w<e){var x=Math.sqrt(e=w);l=t-x,f=n-x,h=t+x,d=n+x,r=g.data}}return r},cr.remove=function(t){if(isNaN(u=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,u,o,a,s,c,l,f,h,d=this._root,p=this._x0,g=this._y0,v=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((c=u>=(a=(p+v)/2))?p=a:v=a,(l=o>=(s=(g+y)/2))?g=s:y=s,n=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},cr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},cr.root=function(){return this._root},cr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},cr.visit=function(t){var n,e,r,i,u,o,a=[],s=this._root;for(s&&a.push(new rr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,u=n.x1,o=n.y1)&&s.length){var c=(r+u)/2,l=(i+o)/2;(e=s[3])&&a.push(new rr(e,c,l,u,o)),(e=s[2])&&a.push(new rr(e,r,l,c,o)),(e=s[1])&&a.push(new rr(e,c,i,u,l)),(e=s[0])&&a.push(new rr(e,r,i,c,l))}return this},cr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new rr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var u,o=n.x0,a=n.y0,s=n.x1,c=n.y1,l=(o+s)/2,f=(a+c)/2;(u=i[0])&&e.push(new rr(u,o,a,l,f)),(u=i[1])&&e.push(new rr(u,l,a,s,f)),(u=i[2])&&e.push(new rr(u,o,f,l,c)),(u=i[3])&&e.push(new rr(u,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},cr.x=function(t){return arguments.length?(this._x=t,this):this._x},cr.y=function(t){return arguments.length?(this._y=t,this):this._y};function lr(t){return t.index}function fr(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function hr(t){return t.x}function dr(t){return t.y}var pr=Math.PI*(3-Math.sqrt(5)),gr=function(){return Math.random()},vr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(gr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var u;if(null!=r)u=r,r=null;else do{r=2*n()-1,u=2*n()-1,i=r*r+u*u}while(!i||i>1);return t+e*u*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(gr)),yr=(function t(n){function e(){var t=vr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(gr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(gr));(function t(n){function e(t){var e=yr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(gr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(gr);var mr=Array.prototype;mr.map,mr.slice;var _r=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wr(t){if(!(n=_r.exec(t)))throw new Error("invalid format: "+t);var n;return new xr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function xr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}wr.prototype=xr.prototype,xr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Mr,br,Pr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Sr=function(t){return(t=Pr(Math.abs(t)))?t[1]:NaN},Cr=function(t,n){var e=Pr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Tr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Cr(100*t,n)},r:Cr,s:function(t,n){var e=Pr(t,n);if(!e)return t+"";var r=e[0],i=e[1],u=i-(Mr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return u===o?r:u>o?r+new Array(u-o+1).join("0"):u>0?r.slice(0,u)+"."+r.slice(u):"0."+new Array(1-u).join("0")+Pr(t,Math.max(0,n+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Nr=function(t){return t},kr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];br=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Nr:(n=kr.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,u=[],o=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),u.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[o=(o+1)%n.length];return u.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",u=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Nr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(kr.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=wr(t)).fill,e=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Tr[m]||(void 0===v&&(v=12),y=!0,m="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?u:/[%p]/.test(m)?s:"",x=Tr[m],M=/[defgprs%]/.test(m);function b(t){var i,u,s,h=_,b=w;if("c"===m)b=x(t)+b,t="";else{var P=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:x(Math.abs(t),v),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),P&&0==+t&&"+"!==f&&(P=!1),h=(P?"("===f?f:c:"-"===f||"("===f?"":f)+h,b=("s"===m?Ar[8+Mr/3]:"")+b+(P&&"("===f?")":""),M)for(i=-1,u=t.length;++i<u;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var S=h.length+t.length+b.length,C=S<p?new Array(p-S+1).join(n):"";switch(g&&d&&(t=r(C+t,C.length?p-b.length:1/0),C=""),e){case"<":t=h+t+b+C;break;case"=":t=h+C+t+b;break;case"^":t=C.slice(0,S=C.length>>1)+h+t+b+C.slice(S);break;default:t=C+h+t+b}return a(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=wr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Sr(n)/3))),i=Math.pow(10,-r),u=Ar[8+r/3];return function(t){return e(i*t)+u}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),br.format,br.formatPrefix;var Dr=new Date,Ur=new Date;function Lr(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,u){var o,a=[];if(e=i.ceil(e),u=null==u?1:Math.floor(u),!(e<r&&u>0))return a;do{a.push(o=new Date(+e)),n(e,u),t(e)}while(o<e&&e<r);return a},i.filter=function(e){return Lr((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Dr.setTime(+n),Ur.setTime(+r),t(Dr),t(Ur),Math.floor(e(Dr,Ur))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Er=Lr((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Er.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Lr((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Fr=Er,Rr=(Er.range,Lr((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));Rr.range;function Yr(t){return Lr((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var qr=Yr(0),Hr=Yr(1),jr=Yr(2),zr=Yr(3),Or=Yr(4),Xr=Yr(5),$r=Yr(6),Ir=(qr.range,Hr.range,jr.range,zr.range,Or.range,Xr.range,$r.range,Lr((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Gr=Ir,Vr=(Ir.range,Lr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Br=(Vr.range,Lr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Zr=(Br.range,Lr((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Wr=(Zr.range,Lr((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Wr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Lr((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Wr:null};Wr.range;function Kr(t){return Lr((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Jr=Kr(0),Qr=Kr(1),ti=Kr(2),ni=Kr(3),ei=Kr(4),ri=Kr(5),ii=Kr(6),ui=(Jr.range,Qr.range,ti.range,ni.range,ei.range,ri.range,ii.range,Lr((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),oi=ui,ai=(ui.range,Lr((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));ai.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Lr((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var si=ai;ai.range;function ci(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function li(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function fi(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var hi,di={"-":"",_:" ",0:"0"},pi=/^\s*\d+/,gi=/^%/,vi=/[\\^$*+?|[\]().{}]/g;function yi(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(n)+i:i)}function mi(t){return t.replace(vi,"\\$&")}function _i(t){return new RegExp("^(?:"+t.map(mi).join("|")+")","i")}function wi(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function xi(t,n,e){var r=pi.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Mi(t,n,e){var r=pi.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function bi(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Pi(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Si(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Ci(t,n,e){var r=pi.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ti(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ni(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function ki(t,n,e){var r=pi.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Ai(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Di(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Ui(t,n,e){var r=pi.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Li(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ei(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Fi(t,n,e){var r=pi.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ri(t,n,e){var r=pi.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Yi(t,n,e){var r=pi.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function qi(t,n,e){var r=gi.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Hi(t,n,e){var r=pi.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function ji(t,n,e){var r=pi.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function zi(t,n){return yi(t.getDate(),n,2)}function Oi(t,n){return yi(t.getHours(),n,2)}function Xi(t,n){return yi(t.getHours()%12||12,n,2)}function $i(t,n){return yi(1+Gr.count(Fr(t),t),n,3)}function Ii(t,n){return yi(t.getMilliseconds(),n,3)}function Gi(t,n){return Ii(t,n)+"000"}function Vi(t,n){return yi(t.getMonth()+1,n,2)}function Bi(t,n){return yi(t.getMinutes(),n,2)}function Zi(t,n){return yi(t.getSeconds(),n,2)}function Wi(t){var n=t.getDay();return 0===n?7:n}function Ki(t,n){return yi(qr.count(Fr(t)-1,t),n,2)}function Ji(t,n){var e=t.getDay();return t=e>=4||0===e?Or(t):Or.ceil(t),yi(Or.count(Fr(t),t)+(4===Fr(t).getDay()),n,2)}function Qi(t){return t.getDay()}function tu(t,n){return yi(Hr.count(Fr(t)-1,t),n,2)}function nu(t,n){return yi(t.getFullYear()%100,n,2)}function eu(t,n){return yi(t.getFullYear()%1e4,n,4)}function ru(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+yi(n/60|0,"0",2)+yi(n%60,"0",2)}function iu(t,n){return yi(t.getUTCDate(),n,2)}function uu(t,n){return yi(t.getUTCHours(),n,2)}function ou(t,n){return yi(t.getUTCHours()%12||12,n,2)}function au(t,n){return yi(1+oi.count(si(t),t),n,3)}function su(t,n){return yi(t.getUTCMilliseconds(),n,3)}function cu(t,n){return su(t,n)+"000"}function lu(t,n){return yi(t.getUTCMonth()+1,n,2)}function fu(t,n){return yi(t.getUTCMinutes(),n,2)}function hu(t,n){return yi(t.getUTCSeconds(),n,2)}function du(t){var n=t.getUTCDay();return 0===n?7:n}function pu(t,n){return yi(Jr.count(si(t)-1,t),n,2)}function gu(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ei(t):ei.ceil(t),yi(ei.count(si(t),t)+(4===si(t).getUTCDay()),n,2)}function vu(t){return t.getUTCDay()}function yu(t,n){return yi(Qr.count(si(t)-1,t),n,2)}function mu(t,n){return yi(t.getUTCFullYear()%100,n,2)}function _u(t,n){return yi(t.getUTCFullYear()%1e4,n,4)}function wu(){return"+0000"}function xu(){return"%"}function Mu(t){return+t}function bu(t){return Math.floor(+t/1e3)}!function(t){hi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,u=t.days,o=t.shortDays,a=t.months,s=t.shortMonths,c=_i(i),l=wi(i),f=_i(u),h=wi(u),d=_i(o),p=wi(o),g=_i(a),v=wi(a),y=_i(s),m=wi(s),_={a:function(t){return o[t.getDay()]},A:function(t){return u[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:zi,e:zi,f:Gi,H:Oi,I:Xi,j:$i,L:Ii,m:Vi,M:Bi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Mu,s:bu,S:Zi,u:Wi,U:Ki,V:Ji,w:Qi,W:tu,x:null,X:null,y:nu,Y:eu,Z:ru,"%":xu},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return u[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:iu,e:iu,f:cu,H:uu,I:ou,j:au,L:su,m:lu,M:fu,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Mu,s:bu,S:hu,u:du,U:pu,V:gu,w:vu,W:yu,x:null,X:null,y:mu,Y:_u,Z:wu,"%":xu},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return P(t,n,e,r)},d:Di,e:Di,f:Yi,H:Li,I:Li,j:Ui,L:Ri,m:Ai,M:Ei,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},q:ki,Q:Hi,s:ji,S:Fi,u:Mi,U:bi,V:Pi,w:xi,W:Si,x:function(t,n,r){return P(t,e,n,r)},X:function(t,n,e){return P(t,r,n,e)},y:Ti,Y:Ci,Z:Ni,"%":qi};function M(t,n){return function(e){var r,i,u,o=[],a=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(o.push(t.slice(s,a)),null!=(i=di[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),o.push(r),s=a+1);return o.push(t.slice(s,a)),o.join("")}}function b(t,n){return function(e){var r,i,u=fi(1900,void 0,1);if(P(u,t,e+="",0)!=e.length)return null;if("Q"in u)return new Date(u.Q);if("s"in u)return new Date(1e3*u.s+("L"in u?u.L:0));if(n&&!("Z"in u)&&(u.Z=0),"p"in u&&(u.H=u.H%12+12*u.p),void 0===u.m&&(u.m="q"in u?u.q:0),"V"in u){if(u.V<1||u.V>53)return null;"w"in u||(u.w=1),"Z"in u?(i=(r=li(fi(u.y,0,1))).getUTCDay(),r=i>4||0===i?Qr.ceil(r):Qr(r),r=oi.offset(r,7*(u.V-1)),u.y=r.getUTCFullYear(),u.m=r.getUTCMonth(),u.d=r.getUTCDate()+(u.w+6)%7):(i=(r=ci(fi(u.y,0,1))).getDay(),r=i>4||0===i?Hr.ceil(r):Hr(r),r=Gr.offset(r,7*(u.V-1)),u.y=r.getFullYear(),u.m=r.getMonth(),u.d=r.getDate()+(u.w+6)%7)}else("W"in u||"U"in u)&&("w"in u||(u.w="u"in u?u.u%7:"W"in u?1:0),i="Z"in u?li(fi(u.y,0,1)).getUTCDay():ci(fi(u.y,0,1)).getDay(),u.m=0,u.d="W"in u?(u.w+6)%7+7*u.W-(i+5)%7:u.w+7*u.U-(i+6)%7);return"Z"in u?(u.H+=u.Z/100|0,u.M+=u.Z%100,li(u)):ci(u)}}function P(t,n,e,r){for(var i,u,o=0,a=n.length,s=e.length;o<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(u=x[i in di?n.charAt(o++):i])||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=M(e,_),_.X=M(r,_),_.c=M(n,_),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),hi.format,hi.parse,hi.utcFormat,hi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Pu=Lr((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Su=(Pu.range,Lr((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Cu=(Su.range,Lr((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));Cu.range;var Tu=function(t){return"string"==typeof t?new Mt([document.querySelectorAll(t)],[document.documentElement]):new Mt([null==t?[]:t],xt)};function Nu(){this._=null}function ku(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Au(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Du(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Uu(t){for(;t.L;)t=t.L;return t}Nu.prototype={constructor:Nu,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Uu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Au(this,e),e=(t=e).U),e.C=!1,r.C=!0,Du(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Du(this,e),e=(t=e).U),e.C=!1,r.C=!0,Au(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,o=t.R;if(e=u?o?Uu(o):u:o,i?i.L===t?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Au(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Du(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Au(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Du(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Au(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Du(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Lu=Nu;function Eu(t,n,e,r){var i=[null,null],u=io.push(i)-1;return i.left=t,i.right=n,e&&Ru(i,t,n,e),r&&Ru(i,n,t,r),eo[t.index].halfedges.push(u),eo[n.index].halfedges.push(u),i}function Fu(t,n,e){var r=[n,e];return r.left=t,r}function Ru(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Yu(t,n,e,r,i){var u,o=t[0],a=t[1],s=o[0],c=o[1],l=0,f=1,h=a[0]-s,d=a[1]-c;if(u=n-s,h||!(u>0)){if(u/=h,h<0){if(u<l)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>l&&(l=u)}if(u=r-s,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>l&&(l=u)}else if(h>0){if(u<l)return;u<f&&(f=u)}if(u=e-c,d||!(u>0)){if(u/=d,d<0){if(u<l)return;u<f&&(f=u)}else if(d>0){if(u>f)return;u>l&&(l=u)}if(u=i-c,d||!(u<0)){if(u/=d,d<0){if(u>f)return;u>l&&(l=u)}else if(d>0){if(u<l)return;u<f&&(f=u)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*d]),f<1&&(t[1]=[s+f*h,c+f*d]),!0)}}}}}function qu(t,n,e,r,i){var u=t[1];if(u)return!0;var o,a,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],d=l[0],p=l[1],g=(f+d)/2,v=(h+p)/2;if(p===h){if(g<n||g>=r)return;if(f>d){if(s){if(s[1]>=i)return}else s=[g,e];u=[g,i]}else{if(s){if(s[1]<e)return}else s=[g,i];u=[g,e]}}else if(a=v-(o=(f-d)/(p-h))*g,o<-1||o>1)if(f>d){if(s){if(s[1]>=i)return}else s=[(e-a)/o,e];u=[(i-a)/o,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/o,i];u=[(e-a)/o,e]}else if(h<p){if(s){if(s[0]>=r)return}else s=[n,o*n+a];u=[r,o*r+a]}else{if(s){if(s[0]<n)return}else s=[r,o*r+a];u=[n,o*n+a]}return t[0]=s,t[1]=u,!0}function Hu(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ju(t,n){return n[+(n.left!==t.site)]}function zu(t,n){return n[+(n.left===t.site)]}var Ou,Xu=[];function $u(){ku(this),this.x=this.y=this.arc=this.site=this.cy=null}function Iu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var o=i[0],a=i[1],s=r[0]-o,c=r[1]-a,l=u[0]-o,f=u[1]-a,h=2*(s*f-c*l);if(!(h>=-oo)){var d=s*s+c*c,p=l*l+f*f,g=(f*d-c*p)/h,v=(s*p-l*d)/h,y=Xu.pop()||new $u;y.arc=t,y.site=i,y.x=g+o,y.y=(y.cy=v+a)+Math.sqrt(g*g+v*v),t.circle=y;for(var m=null,_=ro._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}ro.insert(m,y),m||(Ou=y)}}}}function Gu(t){var n=t.circle;n&&(n.P||(Ou=n.N),ro.remove(n),Xu.push(n),ku(n),t.circle=null)}var Vu=[];function Bu(){ku(this),this.edge=this.site=this.circle=null}function Zu(t){var n=Vu.pop()||new Bu;return n.site=t,n}function Wu(t){Gu(t),no.remove(t),Vu.push(t),ku(t)}function Ku(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],u=t.P,o=t.N,a=[t];Wu(t);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<uo&&Math.abs(r-s.circle.cy)<uo;)u=s.P,a.unshift(s),Wu(s),s=u;a.unshift(s),Gu(s);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<uo&&Math.abs(r-c.circle.cy)<uo;)o=c.N,a.push(c),Wu(c),c=o;a.push(c),Gu(c);var l,f=a.length;for(l=1;l<f;++l)c=a[l],s=a[l-1],Ru(c.edge,s.site,c.site,i);s=a[0],(c=a[f-1]).edge=Eu(s.site,c.site,null,i),Iu(s),Iu(c)}function Ju(t){for(var n,e,r,i,u=t[0],o=t[1],a=no._;a;)if((r=Qu(a,o)-u)>uo)a=a.L;else{if(!((i=u-to(a,o))>uo)){r>-uo?(n=a.P,e=a):i>-uo?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){eo[t.index]={site:t,halfedges:[]}}(t);var s=Zu(t);if(no.insert(n,s),n||e){if(n===e)return Gu(n),e=Zu(n.site),no.insert(s,e),s.edge=e.edge=Eu(n.site,s.site),Iu(n),void Iu(e);if(e){Gu(n),Gu(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,d=t[1]-f,p=e.site,g=p[0]-l,v=p[1]-f,y=2*(h*v-d*g),m=h*h+d*d,_=g*g+v*v,w=[(v*m-d*_)/y+l,(h*_-g*m)/y+f];Ru(e.edge,c,p,w),s.edge=Eu(c,t,null,w),e.edge=Eu(t,p,null,w),Iu(n),Iu(e)}else s.edge=Eu(n.site,s.site)}}function Qu(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],s=e[1],c=s-n;if(!c)return a;var l=a-r,f=1/u-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-u/2)))/f+r:(r+a)/2}function to(t,n){var e=t.N;if(e)return Qu(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var no,eo,ro,io,uo=1e-6,oo=1e-12;function ao(t,n){return n[1]-t[1]||n[0]-t[0]}function so(t,n){var e,r,i,u=t.sort(ao).pop();for(io=[],eo=new Array(t.length),no=new Lu,ro=new Lu;;)if(i=Ou,u&&(!i||u[1]<i.y||u[1]===i.y&&u[0]<i.x))u[0]===e&&u[1]===r||(Ju(u),e=u[0],r=u[1]),u=t.pop();else{if(!i)break;Ku(i.arc)}if(function(){for(var t,n,e,r,i=0,u=eo.length;i<u;++i)if((t=eo[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=Hu(t,io[n[e]]);for(o.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,u=io.length;u--;)qu(i=io[u],t,n,e,r)&&Yu(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>uo||Math.abs(i[0][1]-i[1][1])>uo)||delete io[u]}(o,a,s,c),function(t,n,e,r){var i,u,o,a,s,c,l,f,h,d,p,g,v=eo.length,y=!0;for(i=0;i<v;++i)if(u=eo[i]){for(o=u.site,a=(s=u.halfedges).length;a--;)io[s[a]]||s.splice(a,1);for(a=0,c=s.length;a<c;)p=(d=zu(u,io[s[a]]))[0],g=d[1],f=(l=ju(u,io[s[++a%c]]))[0],h=l[1],(Math.abs(p-f)>uo||Math.abs(g-h)>uo)&&(s.splice(a,0,io.push(Fu(o,d,Math.abs(p-t)<uo&&r-g>uo?[t,Math.abs(f-t)<uo?h:r]:Math.abs(g-r)<uo&&e-p>uo?[Math.abs(h-r)<uo?f:e,r]:Math.abs(p-e)<uo&&g-n>uo?[e,Math.abs(f-e)<uo?h:n]:Math.abs(g-n)<uo&&p-t>uo?[Math.abs(h-n)<uo?f:t,n]:null))-1),++c);c&&(y=!1)}if(y){var m,_,w,x=1/0;for(i=0,y=null;i<v;++i)(u=eo[i])&&(w=(m=(o=u.site)[0]-t)*m+(_=o[1]-n)*_)<x&&(x=w,y=u);if(y){var M=[t,n],b=[t,r],P=[e,r],S=[e,n];y.halfedges.push(io.push(Fu(o=y.site,M,b))-1,io.push(Fu(o,b,P))-1,io.push(Fu(o,P,S))-1,io.push(Fu(o,S,M))-1)}}for(i=0;i<v;++i)(u=eo[i])&&(u.halfedges.length||delete eo[i])}(o,a,s,c)}this.edges=io,this.cells=eo,no=ro=io=eo=null}so.prototype={constructor:so,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return ju(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(u=(i=e.halfedges).length)for(var i,u,o,a,s,c,l=e.site,f=-1,h=n[i[u-1]],d=h.left===l?h.right:h.left;++f<u;)o=d,d=(h=n[i[f]]).left===l?h.right:h.left,o&&d&&r<o.index&&r<d.index&&(s=o,c=d,((a=l)[0]-c[0])*(s[1]-a[1])-(a[0]-s[0])*(c[1]-a[1])<0)&&t.push([l.data,o.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,u=this,o=u._found||0,a=u.cells.length;!(i=u.cells[o]);)if(++o>=a)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=u.cells[r=o],o=null,i.halfedges.forEach((function(e){var r=u.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],c=n-a[1],f=s*s+c*c;f<l&&(l=f,o=a.index)}}))}while(null!==o);return u._found=r,null==e||l<=e*e?i.site:null}};Math.SQRT2;function co(t,n,e){this.k=t,this.x=n,this.y=e}co.prototype={constructor:co,scale:function(t){return 1===t?this:new co(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new co(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new co(1,0,0);co.prototype;var lo=e(20),fo=e(21);function ho(t,n,e){!t||!t.source||t.chosen&&t.source.chosen||(n=n.toUpperCase(),e=e.toUpperCase(),t.chosen=""!=n?t.genotype.toUpperCase().includes(n):t.source.user.toUpperCase().includes(e),t.chosen&&t.source&&(t.source.chosen=!0,t.source.strains_in2.forEach((function(t){ho(t,n,e)})),t.source.strains_in2.forEach((function(t){!function(t){t&&!t.chosen&&(t.chosen=!0,t.chosen&&t.source&&(t.source.chosen=!0))}(t)}))))}lo.forEach((function(t){t.chosen=!1})),fo.forEach((function(t){t.chosen=!1,t.in_sources=[]})),lo.forEach((function(t){t.strains_in2=t.strains_in.map((function(n){var e=fo.find((function(t){return t.id==n}));return e&&e.in_sources.push(t),e})),t.strains_out2=t.strains_out.map((function(n){var e=fo.find((function(t){return t.id==n}));return e.source=t,e}))})),fo.forEach((function(t){ho(t,"","")}));var po=[],go=[];function vo(t,n){po=[],t.forEach((function(t){po.push({id:t.id,name:t.genotype,class:"strain",weight:Math.pow(t.in_sources.filter((function(t){return t.chosen})).length,1.5)})})),n.forEach((function(t){po.push({id:t.id,name:t.description,class:"source",weight:1})}))}function yo(t){go=[],t.forEach((function(t){t.strains_out.forEach((function(n){go.push({source:po.find((function(n){return n.id===t.id})),target:po.find((function(t){return t.id===n}))})})),t.strains_in.forEach((function(n){go.push({source:po.find((function(t){return t.id===n})),target:po.find((function(n){return n.id===t.id}))})}))})),go=go.filter((function(t){return t.source&&t.target}))}function mo(){var t=St("#my_dataviz").append("svg").attr("width",600).attr("height",600).append("g");t.append("svg:defs").selectAll("marker").data(["end"]).enter().append("svg:marker").attr("id",String).attr("viewBox","0 -5 10 10").attr("refX",15).attr("refY",-1.5).attr("markerWidth",4).attr("markerHeight",4).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5");var n=t.selectAll("line").data(go).enter().append("line").style("stroke","#aaa").attr("marker-end","url(#end)"),e=t.selectAll(".node").data(po).enter().append("g").attr("class","node");e.append("circle").attr("r",(function(t){return t.weight+3})).call(function(){var t,n,e,r,i=We,u=Ke,o=Je,a=Qe,s={},c=d("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",y).on("touchmove.drag",m).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var o=w("mouse",u.apply(this,arguments),Mn,this,arguments);o&&(St(ft.view).on("mousemove.drag",g,!0).on("mouseup.drag",v,!0),Nt(ft.view),Ct(),e=!1,t=ft.clientX,n=ft.clientY,o("start"))}}function g(){if(Tt(),!e){var r=ft.clientX-t,i=ft.clientY-n;e=r*r+i*i>f}s.mouse("drag")}function v(){St(ft.view).on("mousemove.drag mouseup.drag",null),kt(ft.view,e),Tt(),s.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=ft.changedTouches,r=u.apply(this,arguments),o=e.length;for(t=0;t<o;++t)(n=w(e[t].identifier,r,xn,this,arguments))&&(Ct(),n("start"))}}function m(){var t,n,e=ft.changedTouches,r=e.length;for(t=0;t<r;++t)(n=s[e[t].identifier])&&(Tt(),n("drag"))}function _(){var t,n,e=ft.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=s[e[t].identifier])&&(Ct(),n("end"))}function w(t,n,e,r,i){var u,a,f,d=e(n,t),p=c.copy();if(yt(new Ze(h,"beforestart",u,t,l,d[0],d[1],0,0,p),(function(){return null!=(ft.subject=u=o.apply(r,i))&&(a=u.x-d[0]||0,f=u.y-d[1]||0,!0)})))return function o(c){var g,v=d;switch(c){case"start":s[t]=o,g=l++;break;case"end":delete s[t],--l;case"drag":d=e(n,t),g=l}yt(new Ze(h,c,u,t,g,d[0]+a,d[1]+f,d[0]-v[0],d[1]-v[1],p),p.apply,p,[c,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Be(!!t),h):i},h.container=function(t){return arguments.length?(u="function"==typeof t?t:Be(t),h):u},h.subject=function(t){return arguments.length?(o="function"==typeof t?t:Be(t),h):o},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:Be(!!t),h):a},h.on=function(){var t=c.on.apply(c,arguments);return t===c?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h}().on("start",(function(t){ft.active||o.alphaTarget(.3).restart();t.fx=t.x,t.fy=t.y})).on("drag",(function(t){t.fx=ft.x,t.fy=ft.y})).on("end",(function(t){ft.active||o.alphaTarget(0);t.fx=null,t.fy=null})));var r=St(".inner-info"),i=document.getElementsByClassName("inner-info")[0];Tu("circle").on("mouseover",(function(t,n){r.style("visibility","visible").transition().duration(200).style("opacity",.9),i.innerHTML="",i.appendChild(function(t){var n=document.createElement("div");if("strain"==t.class){var e=fo.find((function(n){return t.id==n.id})),r=document.createElement("div");r.innerHTML=e.collection+e.number,n.appendChild(r);var i=document.createElement("div");i.innerHTML=e.genotype,n.appendChild(i)}else if("source"==t.class){var u=lo.find((function(n){return t.id==n.id})),o=document.createElement("div");o.innerHTML=u.description,n.appendChild(o);var a=document.createElement("div");a.innerHTML=u.user,n.appendChild(a)}return n}(t))})).on("mouseout",(function(t,n){r.transition().duration(500).style("opacity",0).on("end",(function(){r.style("visibility","hidden")}))})),e.each((function(t){if(this.classList.add(t.class),"source"==t.class){var n=lo.find((function(n){return t.id==n.id}));0==n.strains_in.length?this.classList.add("source-imported"):1==n.strains_in.length?this.classList.add("source-genetics"):2==n.strains_in.length&&this.classList.add("source-mating")}}));var u=t.selectAll("circle"),o=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),u=0,o=.6,a=$e(),s=En(l),c=d("tick","end");function l(){f(),c.call("tick",n),e<r&&(s.stop(),c.call("end",n))}function f(r){var s,c,l=t.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(e+=(u-e)*i,a.each((function(t){t(e)})),s=0;s<l;++s)null==(c=t[s]).fx?c.x+=c.vx*=o:(c.x=c.fx,c.vx=0),null==c.fy?c.y+=c.vy*=o:(c.y=c.fy,c.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),u=e*pr;n.x=i*Math.cos(u),n.y=i*Math.sin(u)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:f,restart:function(){return s.restart(l),n},stop:function(){return s.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(u=+t,n):u},velocityDecay:function(t){return arguments.length?(o=1-t,n):1-o},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,u,o,a,s,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(o=(i=n-(a=t[c]).x)*i+(u=e-a.y)*u)<r&&(s=a,r=o);return s},on:function(t,e){return arguments.length>1?(c.on(t,e),n):c.on(t)}}}(po).force("link",function(t){var n,e,r,i,u,o=lr,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},s=tr(30),c=1;function l(r){for(var i=0,o=t.length;i<c;++i)for(var a,s,l,f,h,d,p,g=0;g<o;++g)s=(a=t[g]).source,f=(l=a.target).x+l.vx-s.x-s.vx||nr(),h=l.y+l.vy-s.y-s.vy||nr(),f*=d=((d=Math.sqrt(f*f+h*h))-e[g])/d*r*n[g],h*=d,l.vx-=f*(p=u[g]),l.vy-=h*p,s.vx+=f*(p=1-p),s.vy+=h*p}function f(){if(r){var a,s,c=r.length,l=t.length,f=$e(r,o);for(a=0,i=new Array(c);a<l;++a)(s=t[a]).index=a,"object"!=typeof s.source&&(s.source=fr(f,s.source)),"object"!=typeof s.target&&(s.target=fr(f,s.target)),i[s.source.index]=(i[s.source.index]||0)+1,i[s.target.index]=(i[s.target.index]||0)+1;for(a=0,u=new Array(l);a<l;++a)s=t[a],u[a]=i[s.source.index]/(i[s.source.index]+i[s.target.index]);n=new Array(l),h(),e=new Array(l),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+s(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(n){return arguments.length?(t=n,f(),l):t},l.id=function(t){return arguments.length?(o=t,l):o},l.iterations=function(t){return arguments.length?(c=+t,l):c},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:tr(+t),h(),l):a},l.distance=function(t){return arguments.length?(s="function"==typeof t?t:tr(+t),d(),l):s},l}().id((function(t){return t.id})).links(go).strength(2)).force("charge",function(){var t,n,e,r,i=tr(-30),u=1,o=1/0,a=.81;function s(r){var i,u=t.length,o=or(t,hr,dr).visitAfter(l);for(e=r,i=0;i<u;++i)n=t[i],o.visit(f)}function c(){if(t){var n,e,u=t.length;for(r=new Array(u),n=0;n<u;++n)e=t[n],r[e.index]=+i(e,n,t)}}function l(t){var n,e,i,u,o,a=0,s=0;if(t.length){for(i=u=o=0;o<4;++o)(n=t[o])&&(e=Math.abs(n.value))&&(a+=n.value,s+=e,i+=e*n.x,u+=e*n.y);t.x=i/s,t.y=u/s}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function f(t,i,s,c){if(!t.value)return!0;var l=t.x-n.x,f=t.y-n.y,h=c-i,d=l*l+f*f;if(h*h/a<d)return d<o&&(0===l&&(d+=(l=nr())*l),0===f&&(d+=(f=nr())*f),d<u&&(d=Math.sqrt(u*d)),n.vx+=l*t.value*e/d,n.vy+=f*t.value*e/d),!0;if(!(t.length||d>=o)){(t.data!==n||t.next)&&(0===l&&(d+=(l=nr())*l),0===f&&(d+=(f=nr())*f),d<u&&(d=Math.sqrt(u*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=l*h,n.vy+=f*h)}while(t=t.next)}}return s.initialize=function(n){t=n,c()},s.strength=function(t){return arguments.length?(i="function"==typeof t?t:tr(+t),c(),s):i},s.distanceMin=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s.distanceMax=function(t){return arguments.length?(o=t*t,s):Math.sqrt(o)},s.theta=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s}().strength(-20).distanceMax(200)).force("center",function(t,n){var e;function r(){var r,i,u=e.length,o=0,a=0;for(r=0;r<u;++r)o+=(i=e[r]).x,a+=i.y;for(o=o/u-t,a=a/u-n,r=0;r<u;++r)(i=e[r]).x-=o,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}(300,300));o.on("tick",(function(){u.attr("cx",(function(t){return t.x})).attr("cy",(function(t){return t.y})),n.attr("x1",(function(t){return t.source.x})).attr("y1",(function(t){return t.source.y})).attr("x2",(function(t){return t.target.x})).attr("y2",(function(t){return t.target.y}))})),o.alpha(1).restart(),o.alpha(1).restart()}var _o=fo.filter((function(t){return t.chosen})),wo=lo.filter((function(t){return t.chosen}));vo(_o,wo),yo(wo),window.onload=mo,document.getElementById("filter-button").onclick=function(){Tu("svg").remove(),fo.forEach((function(t){return t.chosen=!1})),lo.forEach((function(t){return t.chosen=!1}));var t=document.getElementById("input-genotype").value,n=document.getElementById("input-user").value;console.log(t,n),fo.forEach((function(e){ho(e,t,n)})),_o=fo.filter((function(t){return t.chosen})),wo=lo.filter((function(t){return t.chosen})),vo(_o,wo),yo(wo),mo()}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,