{"version":3,"sources":["store.js","funs/main-lib.js","components/EnsemblElement.jsx","components/PlasmidElement.jsx","components/PrimerElement.jsx","components/CollapseElement.jsx","components/CloseupElement.jsx","App.js","serviceWorker.js","index.js"],"names":["store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionsBlacklist","latency","name","compose","createStore","combineReducers","form","tg_modalState","VectorEditor","undefined","applyMiddleware","thunk","vectorEditorMiddleware","makeFeatureArray","seq","utr5","utr3","out","five_prime","id","start","end","strand","cds","type","length","toUpperCase","locations","limits_array","count","i","push","out_array","getExonLimitsFromMaskedSequence","three_prime","getSequenceFromGeneId","geneId","configSequence","expand_3prime","expand_5prime","mask_feature","configFeatures","expand","utr","promiseSequence","Promise","resolve","reject","axios","get","params","then","resp","catch","error","promiseFeatures","all","arr","resp_sequence","utrs","ensembl_resp","transcript","data","Transcript","UTR","forEach","object_type","len","Math","abs","getUTRs","features","sequence","EnsemblElement","setData","clearData","toggleMain","mainSequenceId","useState","geneName","setGeneName","waitingMessage","setWaitingMessage","fetchRequest","React","useCallback","console","log","circular","reason","editorProps","editorName","isFullscreen","showMenuBar","seq_element","updateEditor","sequenceData","annotationVisibility","reverseSequence","cutsites","updateWithEnsemblRequest","action","onSubmit","e","preventDefault","value","onChange","target","className","checked","PlasmidElement","event","files","Array","from","anyToJson","parsedSequence","PrimerElement","sequenceIsValid","errorMessage","placeholder","CollapseElement","collapsed","children","isCollapsed","setIsCollapsed","onClick","aria-expanded","CloseupEditor","height","ToolBarProps","toolList","panelsShown","active","App","emptySequenceObject","ensemblSequenceData","setEnsemblSequenceData","plasmidSequenceData","setPlasmidSequenceData","primers","setAllPrimers","setResultSequence","mainSequence","setMainSequence","useEffect","require","goToEditor","document","getElementById","scrollIntoView","block","ensemblElementProps","plasmidElementProps","primerElementProps","newPrimer","map","primer","requestData","plasmid","jsonToGenbank","gene","primer_1","primer_2","post","genbankToJson","gb_file","mainSequenceData","reduce","result","item","class","CloseupElement","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1a1b24a7.chunk.js","sourcesContent":["\n//optionally connect to the redux store\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { tg_modalState } from \"teselagen-react-components\";\nimport {\n  vectorEditorReducer as VectorEditor,\n  vectorEditorMiddleware\n} from \"open-vector-editor\";\nimport thunk from \"redux-thunk\";\nimport { reducer as form } from \"redux-form\";\n\nconst composeEnhancer =\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      actionsBlacklist: [\"HOVEREDANNOTATIONUPDATE\", \"HOVEREDANNOTATIONCLEAR\"],\n      // actionSanitizer,\n      latency: 1000,\n      name: \"openVE\"\n    })) ||\n  compose;\n\nconst store = createStore(\n  combineReducers({\n    form,\n    tg_modalState,\n    VectorEditor: VectorEditor()\n  }),\n  undefined,\n  compose(\n    applyMiddleware(thunk, vectorEditorMiddleware) //your store should be redux-thunk connected for the VectorEditor component to work\n  )\n);\n\nexport default store;","\nimport axios from 'axios'\n\nfunction getUTRs(ensembl_resp) {\n    // Get the utrs from the transcript object (only the first one)\n    let transcript = ensembl_resp.data.Transcript[0];\n    let utrs = [];\n    transcript.UTR.forEach(utr => {\n        utrs.push(\n            {\n                type: utr.object_type, // five_prime_UTR or three_prime_UTR\n                len: Math.abs(utr.start - utr.end)\n            }\n        )\n    })\n    return utrs;\n}\n// SPAC959.09c has many introns\nfunction getExonLimitsFromMaskedSequence(seq,start,end){\n    let limits_array = [start];\n    let count = 0;\n    for (let i = 0; i < seq.length-1; i++) {\n        let thisIsUp = seq[i] === seq[i].toUpperCase();\n        let nextIsUp = seq[i+1] === seq[i+1].toUpperCase();\n        if (thisIsUp!=nextIsUp)\n        {\n            // This is difference for the start and the finish of the section\n            limits_array.push(i+ count % 2);\n            count+=1;\n        }\n    }\n\n    limits_array.push(end);\n\n    let out_array = [];\n\n    // TODO: This should give an error if the number is not even\n    for (let i = 0; i < limits_array.length; i+=2) {\n        out_array.push({\n            start: limits_array[i],\n            end: limits_array[i+1],\n        })\n    }\n\n    return out_array;\n}\n\n\nfunction makeFeatureArray(seq,utr5,utr3){\n    let out = []\n    const five_prime = {\n        id: \"5utr\",\n        name: \"5'UTR\",\n        start: 0,\n        end: utr5,\n        strand: 1,\n    }\n\n    const cds = {\n        id: \"CDS\",\n        name: \"CDS\",\n        type: 'CDS',\n        start: utr5+1,\n        end: utr3 ==0 ? seq.length-1 : seq.length-utr3-2,\n        strand: 1,\n    }\n    if (seq!==seq.toUpperCase()){\n        cds.locations = getExonLimitsFromMaskedSequence(seq,cds.start,cds.end);\n    }\n\n    const three_prime = {\n        id: \"3utr\",\n        name: \"3'UTR\",\n        start: seq.length-utr3 -1,\n        end: seq.length,\n        strand: 1\n    }\n\n    if (utr5!=0){out.push(five_prime)}\n    out.push(cds);\n    if (utr3!=0){out.push(three_prime)}\n    return out\n}\n\nexport function getSequenceFromGeneId(geneId)\n{\n    const configSequence = {\n        expand_3prime: 0,\n        expand_5prime: 0,\n        mask_feature: 1\n    }\n\n    const configFeatures = {\n\t\texpand: 1,\n\t\tutr: 1,\n\t}\n\n    let promiseSequence = new Promise( (resolve,reject) => {\n        axios.get(`https://rest.ensembl.org/sequence/id/${geneId}`,{ params:configSequence}).then(\n        (resp) => {\n            resolve(resp);\n        }).catch( (error)=>{reject(error)});\n    });\n    let promiseFeatures = new Promise( (resolve,reject) => {\n        axios.get(`https://rest.ensembl.org/lookup/id/${geneId}`,{ params:configFeatures}).then(\n        (resp) => {\n            resolve(resp);\n        }).catch( (error)=>{reject(error)});\n    });\n    let promiseReturn = Promise.all([promiseSequence,promiseFeatures]).then((arr) => {\n        let resp_sequence = arr[0];\n        let resp_features = arr[1];\n        let utrs = getUTRs(resp_features); // five_prime_UTR or three_prime_UTR\n        let utr3 = 0;\n        let utr5 = 0;\n        utrs.forEach(utr => {\n            if (utr.type == 'five_prime_UTR') {utr5 = utr.len}\n            else if (utr.type == 'three_prime_UTR') {utr3 = utr.len}\n        });\n        return {\n                features: makeFeatureArray(resp_sequence.data.seq,utr5,utr3),\n                sequence: resp_sequence.data.seq,\n                name: geneId\n        }\n        \n    }).catch( (error)=>{return(error)});\n\n    return promiseReturn;\n}\n\nexport function getGeneNameFrom(){\n    \n}\n","import React,{useState} from 'react'\nimport { getSequenceFromGeneId } from \"../funs/main-lib\";\nimport { LinearView,updateEditor } from \"open-vector-editor\";\nimport store from \"../store\";\n\nfunction updateWithEnsemblRequest(data) {\n    updateEditor(store, \"DemoEditor\", {\n        sequenceData: {\n            circular: false,\n            ...data\n        },\n        annotationVisibility: {\n            reverseSequence: false,\n            cutsites: false\n        }\n    });\n}\n\nfunction EnsemblElement({id, data, setData, clearData, toggleMain,mainSequenceId}) {\n    const [geneName, setGeneName] = useState(data.name);\n    const [waitingMessage, setWaitingMessage] = useState('');\n    const onSubmit = (e) => {\n        e.preventDefault();\n        fetchRequest();\n    }\n    const fetchRequest = React.useCallback(() => {\n        setWaitingMessage(`Loading ${geneName} from ENSEMBL`);\n        getSequenceFromGeneId(geneName)\n            .then(\n                // Succesful request\n                (resp) => {\n                    console.log('deb',resp)\n                    setData({\n                        circular: false,\n                        ...resp\n                    });\n                    setWaitingMessage('');\n                },\n            )\n            .catch(\n                // Failed request, we clear the data\n                (reason) => {\n                    clearData();\n                    setWaitingMessage(`Request of \"${geneName}\" to ENSEMBL returned an error: ${reason}`);\n                });\n    });\n    const editorProps = {\n        editorName: \"DemoEditor\",\n        isFullscreen: false,\n        showMenuBar: false,\n    };\n    let seq_element = data.sequence.length>0 ? <LinearView {...editorProps} /> : null;\n    if (seq_element) {updateWithEnsemblRequest(data)}\n    return (\n        <div>\n            <p>Type the code of your gene, for example SPAC1782.09c for clp1 of <i>S. pombe</i></p>\n            <form action=\"\" onSubmit={onSubmit}>\n                <input type=\"text\"\n                    value={geneName}\n                    onChange={(e) => { setGeneName(e.target.value) }} />\n                <input type=\"submit\" className='button' value='Get gene'/>\n            </form>\n            <div>{waitingMessage}</div>\n            <div><input type=\"checkbox\" onChange={toggleMain} checked={mainSequenceId==id}/>Show sequence on main editor</div>\n            <div className='editor'>\n                <div>{seq_element}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default EnsemblElement\n","import React from 'react'\nimport { CircularView} from 'open-vector-editor'\nimport {ToolBar, updateEditor} from 'open-vector-editor/es'\nimport {anyToJson} from 'bio-parsers'\nimport store from \"../store\";\n\nfunction PlasmidElement({id, data, setData, clearData, toggleMain, mainSequenceId}) {\n\n    const [waitingMessage, setWaitingMessage] = React.useState('');\n\n    const editorProps = {\n        editorName: \"PlasmidEditor\",\n        isFullscreen: false,\n        annotationVisibility: {\n            reverseSequence: false,\n            cutsites: false\n        }\n    };\n\n    const onChange = (event) => {\n        const files = Array.from(event.target.files)\n        setWaitingMessage('Loading your file')\n        anyToJson(files[0])\n        .then( (resp) => {\n            setData(resp[0].parsedSequence);\n            setWaitingMessage('')\n        })\n        .catch( (reason) => {\n            clearData();\n            setWaitingMessage('The file format is not supported');\n        });\n    }\n    let seq_element = data.sequence.length>0 ? <CircularView {...editorProps} /> : null;\n\n    if (seq_element) {\n        updateEditor(store,\"PlasmidEditor\",{\n        sequenceData: data,\n        annotationVisibility: {\n            reverseSequence: false,\n            cutsites: false\n        }})}\n\n    return (\n        <div>\n            <p>Ideally a '.gb' or '.dna' file with annotations, but will also take FASTA</p>\n            <input type=\"file\" onChange={onChange}/>\n            <div>{waitingMessage}</div>\n            <div><input type=\"checkbox\" onChange={toggleMain} checked={mainSequenceId==id}/>Show sequence on main editor</div>\n            {seq_element}\n        </div>\n    )\n}\n\nexport default PlasmidElement\n","import React,{useState} from 'react'\n\nfunction PrimerElement({data,setData,clearData}) {\n    const [sequenceIsValid, setSequenceIsValid] = useState(true);\n    const validateSequence = (e) => {\n        const inputField = e.target;\n        const validDNAChars  = /^[ACGTacgt]+$/;\n        setSequenceIsValid(inputField.value.length==0 || inputField.value.match(validDNAChars));\n    }\n    const errorMessage = sequenceIsValid ? null : <div className='input-primer-error'>this primer is invalid</div>;\n\n    return <div>\n        <h4>Primer {data.id}</h4>\n        {errorMessage}\n        <form action=\"\">\n        <div>Name</div>\n        <div><input value={data.name} type=\"text\" className='input-primer-name' placeholder='primer name...' id={\"primer_name_\" + data.id}/></div>\n        <div><br />Sequence:</div>\n        <div><input value={data.sequence} type=\"text\" className='input-primer' placeholder='primer sequence...' id={\"primer_seq_\" + data.id}/></div>\n        </form>\n    </div>\n}\n\nexport default PrimerElement\n","import React from 'react'\n\nfunction CollapseElement({ collapsed, children }) {\n    const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n    return (\n        <div>\n\n            <button\n                className=\"collapse-button\"\n                onClick={() => setIsCollapsed(!isCollapsed)}\n            >\n                {isCollapsed ? 'Show' : 'Hide'} description\n            </button>\n            <div\n                className={`collapse-content ${isCollapsed ? 'collapsed' : 'expanded'}`}\n                aria-expanded={isCollapsed}\n            >\n                {children}\n            </div>\n\n        </div>\n    )\n}\n\nexport default CollapseElement\n","import React from 'react'\nimport { Editor} from 'open-vector-editor'\nimport {updateEditor} from 'open-vector-editor/es'\nimport store from \"../store\";\n\nfunction CloseupEditor({data}) {\n    const editorProps = {\n        editorName: \"CloseupEditor\",\n        isFullscreen: false,\n        annotationVisibility: {\n            reverseSequence: false,\n            cutsites: true\n        },\n        height: \"800\",\n        ToolBarProps: {\n            toolList: [\n              \"saveTool\",\n              \"downloadTool\",\n              \"cutsiteTool\",\n              \"featureTool\",\n              \"alignmentTool\",\n              \"orfTool\",\n              \"findTool\",\n              \"visibilityTool\",\n            ]\n          },\n    };\n\n    const seq_element = data.sequence.length>0 && <Editor {...editorProps} />;\n    if (seq_element)\n    {\n        updateEditor(store,\"CloseupEditor\",{\n            sequenceData: data,\n            annotationVisibility: {\n                reverseSequence: true,\n                cutsites: false\n            },\n            panelsShown: [[ \n                {\n                  id: \"rail\",\n                  name: \"Linear Map\",\n                  active: true\n                },\n                {\n                  id: \"sequence\",\n                  name: \"Sequence Map\",\n                },\n                {\n                  active: true,\n                  id: \"circular\",\n                  name: \"Circular Map\"\n                },\n                {\n                  id: \"properties\",\n                  name: \"Properties\"\n                }\n            ]]\n        })\n        return(\n        <div>\n            {seq_element}\n        </div>\n        )\n    }\n\n    return null;\n}\n\nexport default CloseupEditor\n","import React from \"react\";\nimport EnsemblElement from './components/EnsemblElement';\nimport PlasmidElement from './components/PlasmidElement';\nimport PrimerElement from './components/PrimerElement';\nimport ResultElement from './components/ResultElement';\nimport CollapseElement from \"./components/CollapseElement\";\nimport CloseupElement from './components/CloseupElement'\nimport \"./App.css\";\nimport \"./sliders.css\";\nimport \"./QuickNetwork.css\";\nimport { jsonToGenbank } from 'bio-parsers'\nimport axios from \"axios\";\nimport { genbankToJson } from 'bio-parsers'\n\n\n\nfunction App() {\n\n  // Empty object to be fed to the editors\n  const emptySequenceData = {\n    sequence: '',\n    features: {},\n    name: 'SPAC1782.09c',\n  }\n\n  const emptySequenceObject = {\n    // Copy of the object, not reference\n    data: { ...emptySequenceData },\n    id: ''\n  }\n\n  const emptyPrimers = [\n    {\n      id: 1,\n      name: '',\n      sequence: ''\n    },\n    {\n      id: 2,\n      name: '',\n      sequence: ''\n    }]\n\n  const emptyResult = {\n    sequence: '',\n    features: {},\n  }\n\n  // State\n  const [ensemblSequenceData, setEnsemblSequenceData] = React.useState({ ...emptySequenceObject, id: 'ensembl' });\n  const [plasmidSequenceData, setPlasmidSequenceData] = React.useState({ ...emptySequenceObject, id: 'plasmid' });\n  const [primers, setAllPrimers] = React.useState(emptyPrimers);\n  const [resultSequence, setResultSequence] = React.useState({ ...emptyResult, id: 'result' });\n  // TODO set a unique identifier for each property, and use that to set the toggled one,\n  // basically a unique identifier.\n  const [mainSequence, setMainSequence] = React.useState(\"\");\n\n  React.useEffect(() => {\n    setEnsemblSequenceData({ data: require('./exampleCustom.json'), id: ensemblSequenceData.id });\n    setPlasmidSequenceData({ data: require('./examplePlasmid.json'), id: plasmidSequenceData.id });\n    setAllPrimers(require('./examplePrimers.json'))\n  }, [])\n  const setPrimer = (id, newPrimer) => {\n    setAllPrimers(primers.map((primer) => primer.id == id ? newPrimer : primer))\n  }\n  const clearPrimer = (id) => {\n    setAllPrimers(primers.map((primer) => primer.id == id ? {\n      id: id,\n      name: '',\n      sequence: ''\n    } : primer))\n  }\n\n  const goToEditor = () => {\n    document.getElementById(\"closeup-container\").scrollIntoView({ block: 'center'})\n  }\n\n  const ensemblElementProps = {\n    id: ensemblSequenceData.id,\n    data: ensemblSequenceData.data,\n    setData: (sequenceData) => setEnsemblSequenceData({ data: sequenceData, id: ensemblSequenceData.id }),\n    clearData: () => setEnsemblSequenceData(emptySequenceObject),\n    toggleMain: (e) => {\n      e.target.checked ? setMainSequence(ensemblSequenceData.id) : setMainSequence(\"\") ;\n      e.target.checked ? goToEditor(): console.log();\n    },\n  }\n  const plasmidElementProps = {\n    id: plasmidSequenceData.id,\n    data: plasmidSequenceData.data,\n    setData: (sequenceData) => setPlasmidSequenceData({ data: sequenceData, id: plasmidSequenceData.id }),\n    clearData: () => setPlasmidSequenceData(emptySequenceObject),\n    toggleMain: (e) => {\n      e.target.checked ? setMainSequence(plasmidSequenceData.id) : setMainSequence(\"\") \n      e.target.checked ? goToEditor(): console.log();\n    },\n  }\n\n  const primerElementProps = {\n    setData: setPrimer,\n    clearData: clearPrimer,\n  }\n\n  const doTransformation = (e) => {\n    e.preventDefault();\n    fetchRequest();\n  }\n  const fetchRequest = React.useCallback(() => {\n    const requestData = {\n      plasmid: jsonToGenbank(plasmidSequenceData.data),\n      gene: jsonToGenbank(ensemblSequenceData.data),\n      primer_1: primers[0],\n      primer_2: primers[1],\n    }\n    axios.post(\"http://127.0.0.1:5000/react\", requestData)\n      .then((resp) => {\n        genbankToJson(resp.data.gb_file).then((resp) => setResultSequence(resp[0].parsedSequence))\n      })\n      .catch((reason) =>\n        console.log(reason)\n      )\n  });\n\n  const mainSequenceData = [ensemblSequenceData, plasmidSequenceData].reduce((result, item) => {\n    return item.id === mainSequence ? item : result;\n  }, emptySequenceObject);\n  console.log(\"mainSeq\", mainSequenceData)\n  return (\n    <div>\n\n        <div class=\"main-container\">\n        <h1>Mockup of the web interface</h1>\n        <CollapseElement {...{collapsed: true}}>\n        <div class='collapse-group'>\n        <p>\n          This is an early mockup with very limited functionality,\n          but illustrates the modularity of the process, in which entities are connected to each other through steps that\n          represent how they were generated. Any number of entities and steps could be combined.\n        </p>\n        <p>\n          In this case, we show the deletion of the gene clp1 from <i>S. pombe</i> by insertion of\n          a PCR product containing an Hygromycin resistance cassette.\n          The user would upload the plasmid file (or load it from a database), define the primers used for the PCR and\n          click the button, which would generate the PCR product. Then, the user would request the sequence of the gene clp1\n          directly from ensembl, and simulate the transformation.\n        </p>\n        <p>\n          Right now clicking the PCR and transformation buttons does nothing, since the front-end is not connected\n          to a server, but you can request another gene from Ensembl. You can try SPAC959.09c, which has many introns,\n          or your favourite protein-coding gene.\n          Finally, if you click on the tick-box that says \"Show sequence on main editor\", a sequence editor will\n          open below the tree, and will display the sequence. Note that the translation currently shown in the sequence is wrong, since\n          it also shows the translation of the introns. If you try a human gene, like PRC1 (code ENSG00000198901), it will load,\n          but it will be slow for a while.\n        </p>\n        </div>\n        </CollapseElement>\n          <div class=\"tf-tree tf-ancestor-tree tf-custom\">\n            <ul>\n              <li>\n                <span class=\"tf-nc\"><span class=\"node-text\"><div className='result_part'>\n                  Here there would be the transformed allele\n                </div></span></span>\n                <ul>\n                  <li>\n                    <span class=\"tf-nc\"><span class=\"node-text\">\n                      <h3>Transformation</h3>\n                      <form action=\"\" onSubmit={doTransformation}>\n                        <input type=\"submit\" className='button giant-button' value='Simulate homologous recombination' />\n                      </form>\n                    </span></span>\n                    <ul>\n                      <li>\n                        <span class=\"tf-nc\"><span class=\"node-text\">Here there would be the PCR product</span></span>\n                        <ul>\n                          <li>\n                            <span class=\"tf-nc\"><span class=\"node-text\">\n                              <h3>PCR amplification</h3>\n                              <PrimerElement {...{ ...primerElementProps, data: primers[0] }}></PrimerElement>\n                              <PrimerElement {...{ ...primerElementProps, data: primers[1] }}></PrimerElement>\n                              <form action=\"\" onSubmit={(e) => { e.preventDefault(); }}>\n                                <input type=\"z\" className='button giant-button' value='Simulate PCR' />\n                              </form>\n                            </span></span>\n                            <ul>\n                              <li>\n                                <span class=\"tf-nc\"><span class=\"node-text\">\n                                  <div className='result_part'>\n                                    <h3>Import Plasmid from file</h3>\n                                    <PlasmidElement {...{ ...plasmidElementProps, mainSequenceId: mainSequence }}></PlasmidElement>\n                                  </div>\n                                </span></span>\n                              </li>\n                            </ul>\n                          </li>\n                        </ul>\n                      </li>\n                      <li>\n                        <span class=\"tf-nc\"><span class=\"node-text\">\n                          <h3>Request gene from Ensembl</h3>\n                          <EnsemblElement {...{ ...ensemblElementProps, mainSequenceId: mainSequence }}></EnsemblElement>\n                        </span></span>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </div>\n      </div>\n      <div id=\"closeup-container\" className='closeup-container'> <CloseupElement {...{ data: mainSequenceData.data }}></CloseupElement> </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport QuickNetwork from \"./QuickNetwork\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n      {/* <QuickNetwork></QuickNetwork> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}